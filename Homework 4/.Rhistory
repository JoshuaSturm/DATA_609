i <- 2
while(i <= n){
# If seed^2 has an odd number of digits, add a leading 0
# if((str_length(seed^2) %% 2 != 0)){
#   seedsq <- paste0(0, seed^2)
# } else{
#   seedsq <- seed^2
# }
# I realized my mistake with the above code - there always needs to be 2*seed digits
# I can use the str_pad() function to add as many zeros as I want
seedsq <- str_pad(string = as.character(seed^2), width = 2*seed, side = c('left'), pad = c('0'))
# midseedsq <- str_sub(seedsq, (str_length(seedsq) / 2) - str_length(seed) / 2 + 1, str_length(seedsq) / 2 + str_length(seed) / 2)
midseedsq <- str_sub(seedsq, str_length(seed) - str_length(seed) / 2 + 1, str_length(seed) + str_length(seed) / 2)
val_list[i] <- as.integer(midseedsq)
seed <- as.integer(midseedsq)
i <- i + 1
}
return(val_list)
}
msq(1009, 10)
# Function to generate random numbers using the middle-square method
msq <- function(seed, n){
# Function takes two arguments - n iterations and a starting seed number
# initialize vector with seed value
val_list <- vector("integer", n)
val_list[1] <- seed
i <- 2
while(i <= n){
# If seed^2 has an odd number of digits, add a leading 0
# if((str_length(seed^2) %% 2 != 0)){
#   seedsq <- paste0(0, seed^2)
# } else{
#   seedsq <- seed^2
# }
# I realized my mistake with the above code - there always needs to be 2*seed digits
# I can use the str_pad() function to add as many zeros as I want
seedsq <- str_pad(string = as.character(seed^2), width = 2*seed, side = 'left', pad = '0')
# midseedsq <- str_sub(seedsq, (str_length(seedsq) / 2) - str_length(seed) / 2 + 1, str_length(seedsq) / 2 + str_length(seed) / 2)
midseedsq <- str_sub(seedsq, str_length(seed) - str_length(seed) / 2 + 1, str_length(seed) + str_length(seed) / 2)
val_list[i] <- as.integer(midseedsq)
seed <- as.integer(midseedsq)
i <- i + 1
}
return(val_list)
}
msq(1009, 10)
# Function to generate random numbers using the middle-square method
msq <- function(seed, n){
# Function takes two arguments - n iterations and a starting seed number
# initialize vector with seed value
val_list <- vector("integer", n)
val_list[1] <- seed
i <- 2
while(i <= n){
# If seed^2 has an odd number of digits, add a leading 0
# if((str_length(seed^2) %% 2 != 0)){
#   seedsq <- paste0(0, seed^2)
# } else{
#   seedsq <- seed^2
# }
# I realized my mistake with the above code - there always needs to be 2*seed digits
# I can use the str_pad() function to add as many zeros as I want
seedsq <- str_pad(string = seed^2, width = 2*seed, side = 'left', pad = '0')
# midseedsq <- str_sub(seedsq, (str_length(seedsq) / 2) - str_length(seed) / 2 + 1, str_length(seedsq) / 2 + str_length(seed) / 2)
midseedsq <- str_sub(seedsq, str_length(seed) - str_length(seed) / 2 + 1, str_length(seed) + str_length(seed) / 2)
val_list[i] <- as.integer(midseedsq)
seed <- as.integer(midseedsq)
i <- i + 1
}
return(val_list)
}
msq(1009, 10)
seed = 1009
seedsq <- str_pad(string = seed^2, width = 2*seed, side = 'left', pad = '0')
seedsq
# Function to generate random numbers using the middle-square method
msq <- function(seed, n){
# Function takes two arguments - n iterations and a starting seed number
# initialize vector with seed value
val_list <- vector("integer", n)
val_list[1] <- seed
i <- 2
while(i <= n){
# If seed^2 has an odd number of digits, add a leading 0
# if((str_length(seed^2) %% 2 != 0)){
#   seedsq <- paste0(0, seed^2)
# } else{
#   seedsq <- seed^2
# }
# I realized my mistake with the above code - there always needs to be 2*seed digits
# I can use the str_pad() function to add as many zeros as I want
seedsq <- str_pad(string = seed^2, width = as.character(2*seed), side = 'left', pad = '0')
# midseedsq <- str_sub(seedsq, (str_length(seedsq) / 2) - str_length(seed) / 2 + 1, str_length(seedsq) / 2 + str_length(seed) / 2)
midseedsq <- str_sub(seedsq, str_length(seed) - str_length(seed) / 2 + 1, str_length(seed) + str_length(seed) / 2)
val_list[i] <- as.integer(midseedsq)
seed <- as.integer(midseedsq)
i <- i + 1
}
return(val_list)
}
msq(1009, 10)
seed = 1009
seedsq <- str_pad(string = seed^2, width = as.character(2*seed), side = 'left', pad = '0')
seedsq
# Function to generate random numbers using the middle-square method
msq <- function(seed, n){
# Function takes two arguments - n iterations and a starting seed number
# initialize vector with seed value
val_list <- vector("integer", n)
val_list[1] <- seed
i <- 2
while(i <= n){
# If seed^2 has an odd number of digits, add a leading 0
# if((str_length(seed^2) %% 2 != 0)){
#   seedsq <- paste0(0, seed^2)
# } else{
#   seedsq <- seed^2
# }
# I realized my mistake with the above code - there always needs to be 2*seed digits
# I can use the str_pad() function to add as many zeros as I want
seedsq <- str_pad(string = seed^2, width = str_length(2*seed), side = 'left', pad = '0')
# midseedsq <- str_sub(seedsq, (str_length(seedsq) / 2) - str_length(seed) / 2 + 1, str_length(seedsq) / 2 + str_length(seed) / 2)
midseedsq <- str_sub(seedsq, str_length(seed) - str_length(seed) / 2 + 1, str_length(seed) + str_length(seed) / 2)
val_list[i] <- as.integer(midseedsq)
seed <- as.integer(midseedsq)
i <- i + 1
}
return(val_list)
}
msq(1009, 10)
seedsq <- str_pad(string = seed^2, width = str_length(2*seed), side = 'left', pad = '0')
1009^2
01018081
# Function to generate random numbers using the middle-square method
msq <- function(seed, n){
# Function takes two arguments - n iterations and a starting seed number
# initialize vector with seed value
val_list <- vector("integer", n)
val_list[1] <- seed
i <- 2
while(i <= n){
# If seed^2 has an odd number of digits, add a leading 0
# if((str_length(seed^2) %% 2 != 0)){
#   seedsq <- paste0(0, seed^2)
# } else{
#   seedsq <- seed^2
# }
# I realized my mistake with the above code - there always needs to be 2*seed digits
# I can use the str_pad() function to add as many zeros as I want
seedsq <- as.character(str_pad(string = seed^2, width = str_length(2*seed), side = 'left', pad = '0'))
# midseedsq <- str_sub(seedsq, (str_length(seedsq) / 2) - str_length(seed) / 2 + 1, str_length(seedsq) / 2 + str_length(seed) / 2)
midseedsq <- str_sub(seedsq, str_length(seed) - str_length(seed) / 2 + 1, str_length(seed) + str_length(seed) / 2)
val_list[i] <- as.integer(midseedsq)
seed <- as.integer(midseedsq)
i <- i + 1
}
return(val_list)
}
msq(1009, 10)
# Function to generate random numbers using the middle-square method
msq <- function(seed, n){
# Function takes two arguments - n iterations and a starting seed number
# initialize vector with seed value
val_list <- vector("integer", n)
val_list[1] <- seed
i <- 2
while(i <= n){
# If seed^2 has an odd number of digits, add a leading 0
# if((str_length(seed^2) %% 2 != 0)){
#   seedsq <- paste0(0, seed^2)
# } else{
#   seedsq <- seed^2
# }
# I realized my mistake with the above code - there always needs to be 2*seed digits
# I can use the str_pad() function to add as many zeros as I want
seedsq <- as.character(str_pad(string = seed^2, width = str_length(2*seed), side = 'left', pad = '0'))
# midseedsq <- str_sub(seedsq, (str_length(seedsq) / 2) - str_length(seed) / 2 + 1, str_length(seedsq) / 2 + str_length(seed) / 2)
midseedsq <- str_sub(seedsq, str_length(seed) - str_length(seed) / 2 + 1, str_length(seed) + str_length(seed) / 2)
val_list[i] <- as.character(midseedsq)
seed <- as.integer(midseedsq)
i <- i + 1
}
return(val_list)
}
msq(1009, 10)
seedsq <- as.character(str_pad(string = seed^2, width = str_length(2*seed), side = 'left', pad = '0'))
seedsq
# Function to generate random numbers using the middle-square method
msq <- function(seed, n){
# Function takes two arguments - n iterations and a starting seed number
# initialize vector with seed value
val_list <- vector("integer", n)
val_list[1] <- seed
i <- 2
while(i <= n){
# If seed^2 has an odd number of digits, add a leading 0
# if((str_length(seed^2) %% 2 != 0)){
#   seedsq <- paste0(0, seed^2)
# } else{
#   seedsq <- seed^2
# }
# I realized my mistake with the above code - there always needs to be 2*seed digits
# I can use the str_pad() function to add as many zeros as I want
seedsq <- str_sub(str_pad(string = seed^2, width = str_length(2*seed), side = 'left', pad = '0'))
# midseedsq <- str_sub(seedsq, (str_length(seedsq) / 2) - str_length(seed) / 2 + 1, str_length(seedsq) / 2 + str_length(seed) / 2)
midseedsq <- str_sub(seedsq, str_length(seed) - str_length(seed) / 2 + 1, str_length(seed) + str_length(seed) / 2)
val_list[i] <- as.integer(midseedsq)
seed <- as.integer(midseedsq)
i <- i + 1
}
return(val_list)
}
msq(1009, 10)
# Function to generate random numbers using the middle-square method
msq <- function(seed, n){
# Function takes two arguments - n iterations and a starting seed number
# initialize vector with seed value
val_list <- vector("integer", n)
val_list[1] <- seed
i <- 2
while(i <= n){
# If seed^2 has an odd number of digits, add a leading 0
# if((str_length(seed^2) %% 2 != 0)){
#   seedsq <- paste0(0, seed^2)
# } else{
#   seedsq <- seed^2
# }
# I realized my mistake with the above code - there always needs to be 2*seed digits
# I can use the str_pad() function to add as many zeros as I want
seedsq <- str_sub(str_pad(string = seed^2, width = str_length(2*seed), side = 'left', pad = '0'))
# midseedsq <- str_sub(seedsq, (str_length(seedsq) / 2) - str_length(seed) / 2 + 1, str_length(seedsq) / 2 + str_length(seed) / 2)
midseedsq <- str_sub(seedsq, str_length(seed) - str_length(seed) / 2 + 1, str_length(seed) + str_length(seed) / 2)
val_list[i] <- as.integer(midseedsq)
seed <- as.integer(midseedsq)
i <- i + 1
}
return(val_list)
}
msq(1009, 10)
# Function to generate random numbers using the middle-square method
msq <- function(seed, n){
# Function takes two arguments - n iterations and a starting seed number
# initialize vector with seed value
val_list <- vector("integer", n)
val_list[1] <- seed
i <- 2
while(i <= n){
# If seed^2 has an odd number of digits, add a leading 0
# if((str_length(seed^2) %% 2 != 0)){
#   seedsq <- paste0(0, seed^2)
# } else{
#   seedsq <- seed^2
# }
# I realized my mistake with the above code - there always needs to be 2*seed digits
# I can use the str_pad() function to add as many zeros as I want
seedsq <- str_pad(string = seed^2, width = str_length(2*seed), side = 'left', pad = '0')
# midseedsq <- str_sub(seedsq, (str_length(seedsq) / 2) - str_length(seed) / 2 + 1, str_length(seedsq) / 2 + str_length(seed) / 2)
midseedsq <- str_sub(as.character(seedsq), str_length(seed) - str_length(seed) / 2 + 1, str_length(seed) + str_length(seed) / 2)
val_list[i] <- as.integer(midseedsq)
seed <- as.integer(midseedsq)
i <- i + 1
}
return(val_list)
}
msq(1009, 10)
# Function to generate random numbers using the middle-square method
msq <- function(seed, n){
# Function takes two arguments - n iterations and a starting seed number
# initialize vector with seed value
val_list <- vector("integer", n)
val_list[1] <- seed
i <- 2
while(i <= n){
# If seed^2 has an odd number of digits, add a leading 0
# if((str_length(seed^2) %% 2 != 0)){
#   seedsq <- paste0(0, seed^2)
# } else{
#   seedsq <- seed^2
# }
# I realized my mistake with the above code - there always needs to be 2*seed digits
# I can use the str_pad() function to add as many zeros as I want
seedsq <- str_pad(string = seed^2, width = str_length(2*seed), side = 'left', pad = '0')
midseedsq <- str_sub(seedsq, (str_length(seedsq) / 2) - str_length(seed) / 2 + 1, str_length(seedsq) / 2 + str_length(seed) / 2)
# midseedsq <- str_sub(seedsq, str_length(seed) - str_length(seed) / 2 + 1, str_length(seed) + str_length(seed) / 2)
val_list[i] <- as.integer(midseedsq)
seed <- as.integer(midseedsq)
i <- i + 1
}
return(val_list)
}
msq(1009, 10)
seedsq <- str_pad(string = seed^2, width = str_length(2*seed), side = 'left', pad = '0')
seed <- 180
seedsq
seed <- 1009
seedsq <- str_pad(string = seed^2, width = str_length(2*seed), side = 'left', pad = '0')
seedsq
# Function to generate random numbers using the middle-square method
msq <- function(seed, n){
# Function takes two arguments - n iterations and a starting seed number
# initialize vector with seed value
val_list <- vector("integer", n)
val_list[1] <- seed
i <- 2
while(i <= n){
# If seed^2 has an odd number of digits, add a leading 0
# if((str_length(seed^2) %% 2 != 0)){
#   seedsq <- paste0(0, seed^2)
# } else{
#   seedsq <- seed^2
# }
# I realized my mistake with the above code - there always needs to be 2*seed digits
# I can use the str_pad() function to add as many zeros as I want
seedsq <- str_pad(string = seed^2, width = str_length(2*seed), side = 'left', pad = 0)
midseedsq <- str_sub(seedsq, (str_length(seedsq) / 2) - str_length(seed) / 2 + 1, str_length(seedsq) / 2 + str_length(seed) / 2)
# midseedsq <- str_sub(seedsq, str_length(seed) - str_length(seed) / 2 + 1, str_length(seed) + str_length(seed) / 2)
val_list[i] <- as.integer(midseedsq)
seed <- as.integer(midseedsq)
i <- i + 1
}
return(val_list)
}
msq(1009, 10)
# Function to generate random numbers using the middle-square method
msq <- function(seed, n){
# Function takes two arguments - n iterations and a starting seed number
# initialize vector with seed value
val_list <- vector("integer", n)
val_list[1] <- seed
i <- 2
while(i <= n){
# If seed^2 has an odd number of digits, add a leading 0
# if((str_length(seed^2) %% 2 != 0)){
#   seedsq <- paste0(0, seed^2)
# } else{
#   seedsq <- seed^2
# }
# I realized my mistake with the above code - there always needs to be 2*seed digits
# I can use the str_pad() function to add as many zeros as I want
seedsq <- str_pad(string = seed^2, width = str_length(2*seed), side = 'left', pad = 0)
# midseedsq <- str_sub(seedsq, (str_length(seedsq) / 2) - str_length(seed) / 2 + 1, str_length(seedsq) / 2 + str_length(seed) / 2)
midseedsq <- str_sub(seedsq, str_length(seed) - str_length(seed) / 2 + 1, str_length(seed) + str_length(seed) / 2)
val_list[i] <- as.integer(midseedsq)
seed <- as.integer(midseedsq)
i <- i + 1
}
return(val_list)
}
msq(1009, 10)
# Function to generate random numbers using the middle-square method
msq <- function(seed, n){
# Function takes two arguments - n iterations and a starting seed number
# initialize vector with seed value
val_list <- vector("integer", n)
val_list[1] <- seed
i <- 2
while(i <= n){
# If seed^2 has an odd number of digits, add a leading 0
# if((str_length(seed^2) %% 2 != 0)){
#   seedsq <- paste0(0, seed^2)
# } else{
#   seedsq <- seed^2
# }
# I realized my mistake with the above code - there always needs to be 2*seed digits
# I can use the str_pad() function to add as many zeros as I want
seedsq <- str_pad(string = seed^2, width = str_length(2*seed), side = 'left', pad = '0')
# midseedsq <- str_sub(seedsq, (str_length(seedsq) / 2) - str_length(seed) / 2 + 1, str_length(seedsq) / 2 + str_length(seed) / 2)
midseedsq <- str_sub(seedsq, str_length(seed) - str_length(seed) / 2 + 1, str_length(seed) + str_length(seed) / 2)
val_list[i] <- as.integer(midseedsq)
seed <- as.integer(midseedsq)
i <- i + 1
}
return(val_list)
}
msq(1009, 10)
?subtring
?substring
seed <- 1009
seedsq <- str_pad(string = seed^2, width = str_length(2*seed), side = 'left', pad = '0')
seedsq
seedsq <- str_pad(string = seed^2, width = str_length(2*seed), side = 'left', pad = 'k')
seedsq
seedsq <- str_pad(string = seed^2, width = str_length(2*seed+1), side = 'left', pad = 'k')
seedsq
seedsq <- str_pad(string = seed^2, width = str_length(seed), side = 'left', pad = 'k')
seedsq
seedsq <- NULL
seedsq <- str_pad(string = seed^2, width = str_length(seed), side = 'left', pad = '0')
seedsq
seedsq <- str_pad(string = seed^2, width = str_length(2 * seed), side = 'right', pad = 'k')
seedsq <- str_pad(string = seed^2, width = 2 * str_length(seed), side = 'right', pad = 'k')
seedsq
seed <- 180
seedsq
seedsq <- str_pad(string = seed^2, width = 2 * str_length(seed), side = 'right', pad = 'k')
seedsq
seedsq <- str_pad(string = seed^2, width = 2 * str_length(seed), side = 'left', pad = '0')
seed <- 1009
seedsq <- str_pad(string = seed^2, width = 2 * str_length(seed), side = 'left', pad = '0')
seedsq
seed <- 180
seedsq <- str_pad(string = seed^2, width = 2 * str_length(seed), side = 'left', pad = '0')
seedsq
# Function to generate random numbers using the middle-square method
msq <- function(seed, n){
# Function takes two arguments - n iterations and a starting seed number
# initialize vector with seed value
val_list <- vector("integer", n)
val_list[1] <- seed
i <- 2
while(i <= n){
# If seed^2 has an odd number of digits, add a leading 0
# if((str_length(seed^2) %% 2 != 0)){
#   seedsq <- paste0(0, seed^2)
# } else{
#   seedsq <- seed^2
# }
# I realized my mistake with the above code - there always needs to be 2*seed digits
# I can use the str_pad() function to add as many zeros as I want
seedsq <- str_pad(string = seed^2, width = str_length(2*val_list[1]), side = 'left', pad = '0')
# midseedsq <- str_sub(seedsq, (str_length(seedsq) / 2) - str_length(seed) / 2 + 1, str_length(seedsq) / 2 + str_length(seed) / 2)
midseedsq <- str_sub(seedsq, str_length(seed) - str_length(seed) / 2 + 1, str_length(seed) + str_length(seed) / 2)
val_list[i] <- as.integer(midseedsq)
seed <- as.integer(midseedsq)
i <- i + 1
}
return(val_list)
}
msq(1009, 10)
# Function to generate random numbers using the middle-square method
msq <- function(seed, n){
# Function takes two arguments - n iterations and a starting seed number
# initialize vector with seed value
val_list <- vector("integer", n)
val_list[1] <- seed
i <- 2
while(i <= n){
# If seed^2 has an odd number of digits, add a leading 0
# if((str_length(seed^2) %% 2 != 0)){
#   seedsq <- paste0(0, seed^2)
# } else{
#   seedsq <- seed^2
# }
# I realized my mistake with the above code - there always needs to be 2*seed digits
# I can use the str_pad() function to add as many zeros as I want
seedsq <- str_pad(string = seed^2, width = 2*str_length(val_list[1]), side = 'left', pad = '0')
# midseedsq <- str_sub(seedsq, (str_length(seedsq) / 2) - str_length(seed) / 2 + 1, str_length(seedsq) / 2 + str_length(seed) / 2)
midseedsq <- str_sub(seedsq, str_length(seed) - str_length(seed) / 2 + 1, str_length(seed) + str_length(seed) / 2)
val_list[i] <- as.integer(midseedsq)
seed <- as.integer(midseedsq)
i <- i + 1
}
return(val_list)
}
msq(1009, 10)
val_list[1] <- seed
seed <- 1009
val_list[1] <- seed
str_length(val_list[1])
# Function to generate random numbers using the middle-square method
msq <- function(seed, n){
# Function takes two arguments - n iterations and a starting seed number
# initialize vector with seed value
val_list <- vector("integer", n)
val_list[1] <- seed
i <- 2
while(i <= n){
# If seed^2 has an odd number of digits, add a leading 0
# if((str_length(seed^2) %% 2 != 0)){
#   seedsq <- paste0(0, seed^2)
# } else{
#   seedsq <- seed^2
# }
# I realized my mistake with the above code - there always needs to be 2*seed digits
# I can use the str_pad() function to add as many zeros as I want
seedsq <- str_pad(string = seed^2, width = 2*str_length(val_list[1]), side = 'left', pad = '0')
midseedsq <- str_sub(seedsq, (str_length(seedsq) / 2) - str_length(seed) / 2 + 1, str_length(seedsq) / 2 + str_length(seed) / 2)
# midseedsq <- str_sub(seedsq, str_length(seed) - str_length(seed) / 2 + 1, str_length(seed) + str_length(seed) / 2)
val_list[i] <- as.integer(midseedsq)
seed <- as.integer(midseedsq)
i <- i + 1
}
return(val_list)
}
msq(1009, 10)
# initialize vector with seed value
val_list <- vector("integer", n)
val_list[1] <- seed
# I realized my mistake with the above code - there always needs to be 2*seed digits
# I can use the str_pad() function to add as many zeros as I want
seedsq <- str_pad(string = seed^2, width = 2*str_length(val_list[1]), side = 'left', pad = '0')
seedsq
180^2
seed <- s80^2
seed <- 180^2
# I realized my mistake with the above code - there always needs to be 2*seed digits
# I can use the str_pad() function to add as many zeros as I want
seedsq <- str_pad(string = seed^2, width = 2*str_length(val_list[1]), side = 'left', pad = '0')
seedsq
180^2
seed <- 180^2
# I realized my mistake with the above code - there always needs to be 2*seed digits
# I can use the str_pad() function to add as many zeros as I want
seedsq <- str_pad(string = seed^2, width = 2*str_length(val_list[1]), side = 'left', pad = '0')
seedsq
seed <- 1009
# I realized my mistake with the above code - there always needs to be 2*seed digits
# I can use the str_pad() function to add as many zeros as I want
seedsq <- str_pad(string = seed^2, width = 2*str_length(val_list[1]), side = 'left', pad = '0')
seedsq
seed <- 01018081^2
32400^2
